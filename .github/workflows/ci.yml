name: CI Pipeline

on:
  push:
    branches:
      - master
      - QA
  pull_request:
    branches:
      - master
      - QA

jobs:
  test:
    name: Run Linting, Tests & Compilation
    runs-on: ubuntu-latest
    env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DNS_SENTRY: ${{ secrets.DNS_SENTRY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8 (Linting)
        run: |
          flake8 . || exit 1

      - name: Run Pytest with coverage
        run: |
          pytest || exit 1

      - name: Check Coverage >= 80%
        run: |
          pytest --cov-report=term-missing
          coverage report --fail-under=80

  containerize:
    name: Build and push Docker Image
    if: github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    env:
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DNS_SENTRY: ${{ secrets.DNS_SENTRY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Set Docker Image Tag
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build Docker Image with secrets
        run: |
          docker build \
          --build-arg DJANGO_SECRET_KEY="$DJANGO_SECRET_KEY" \
          --build-arg DNS_SENTRY="$DNS_SENTRY" \
          -t "$DOCKERHUB_USERNAME/oc-lettings-site:${{ env.IMAGE_TAG }}" \
          -t "$DOCKERHUB_USERNAME/oc-lettings-site:latest" .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push "$DOCKERHUB_USERNAME/oc-lettings-site:${{ env.IMAGE_TAG }}"
          docker push "$DOCKERHUB_USERNAME/oc-lettings-site:latest"

  deploy:
    name: Deploy to Render
    if: github.ref == 'refs/heads/master'
    needs: containerize
    runs-on: ubuntu-latest
    env:
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: ${{ env.IMAGE_TAG }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Deploy to Render
        run: |
          curl -X PATCH https://api.render.com/v1/services/YOUR_SERVICE_ID \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "env": {
              "DOCKER_IMAGE": "'$DOCKERHUB_USERNAME/oc-lettings-site:latest'"
            }
          }'
