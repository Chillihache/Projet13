name: CI Pipeline

on:
  push:
    branches:
      - master
      - QA
  pull_request:
    branches:
      - master
      - QA

jobs:
  test:
    name: Run Linting, Tests & Compilation
    runs-on: ubuntu-latest
    env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DNS_SENTRY: ${{ secrets.DNS_SENTRY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8 (Linting)
        run: |
          flake8 . || exit 1

      - name: Run Pytest with coverage
        run: |
          pytest || exit 1

      - name: Check Coverage >= 80%
        run: |
          pytest --cov-report=term-missing
          coverage report --fail-under=80

  containerize:
    name: Build and push Docker Image
    if: github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    env:
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DNS_SENTRY: ${{ secrets.DNS_SENTRY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Set Docker Image Tag
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build Docker Image with secrets
        run: |
          docker build \
          --build-arg DJANGO_SECRET_KEY="$DJANGO_SECRET_KEY" \
          --build-arg DNS_SENTRY="$DNS_SENTRY" \
          -t "$DOCKERHUB_USERNAME/oc-lettings-site:${{ env.IMAGE_TAG }}" \
          -t "$DOCKERHUB_USERNAME/oc-lettings-site:latest" .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push "$DOCKERHUB_USERNAME/oc-lettings-site:${{ env.IMAGE_TAG }}"
          docker push "$DOCKERHUB_USERNAME/oc-lettings-site:latest"

  deploy:
    name: Deploy to Render
    needs: containerize
    runs-on: ubuntu-latest
    env:
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DNS_SENTRY: ${{ secrets.DNS_SENTRY }}
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Set Docker Image Tag
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Check if Render Service Exists
        run: |
          SERVICE_EXISTS=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/services | jq -r '.[] | select(.service.name=="oc-lettings-site") | .id')
          if [[ -z "$SERVICE_EXISTS" ]]; then
            echo "SERVICE_EXISTS=False" >> $GITHUB_ENV
          else
            echo "SERVICE_EXISTS=True" >> $GITHUB_ENV
            echo "RENDER_SERVICE_ID=$SERVICE_EXISTS" >> $GITHUB_ENV
          fi

      - name: Create Environment Group if Not Exists
        if: env.SERVICE_EXISTS == 'False'
        run: |
          curl -X POST "https://api.render.com/v1/env-groups" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "oc-lettings-env",
              "envVars": [
                {"key": "DJANGO_SECRET_KEY", "value": "'$DJANGO_SECRET_KEY'"},
                {"key": "DNS_SENTRY", "value": "'$DNS_SENTRY'"}
              ]
            }'

      - name: Create New Render Service
        if: env.SERVICE_EXISTS == 'False'
        run: |
          curl -X POST "https://api.render.com/v1/services" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "oc-lettings-site",
              "type": "web",
              "env": "docker",
              "repo": "docker.io/${DOCKERHUB_USERNAME}/oc-lettings-site:${{ env.IMAGE_TAG }}",
              "envVars": "oc-lettings-env",
              "region": "oregon",
              "plan": "free",
              "branch": "master",
              "autoDeploy": true
            }'

      - name: Update Environment Variables for Existing Service
        if: env.SERVICE_EXISTS == 'True'
        run: |
          curl -X PATCH "https://api.render.com/v1/services/$RENDER_SERVICE_ID/env-vars" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "envVars": [
                {"key": "DJANGO_SECRET_KEY", "value": "'$DJANGO_SECRET_KEY'"},
                {"key": "DNS_SENTRY", "value": "'$DNS_SENTRY'"}
              ]
            }'

      - name: Update Existing Service to New Image
        if: env.SERVICE_EXISTS == 'True'
        run: |
          curl -X PATCH "https://api.render.com/v1/services/$RENDER_SERVICE_ID" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "repo": "docker.io/${DOCKERHUB_USERNAME}/oc-lettings-site:${{ env.IMAGE_TAG }}",
              "autoDeploy": true
            }'
